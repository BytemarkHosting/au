#!/usr/bin/env ruby

app_name = ARGV.shift or fail "Need an app name!"
prefix = ARGV.shift.to_s.sub("^/",'')
prefix = "opt/apps" if prefix.empty?
src_repo = "src"


puts <<-MAKEFILE
ROOT:=$(shell pwd)/build
APP=#{app_name}
SRC_ROOT=#{prefix}/$(APP)
SRC=$(SRC_ROOT)/source
APP_GEM_HOME=$(SRC_ROOT)/.gems
BUNDLE_GEM_HOME=$(SRC_ROOT)/vendor/bundle
GEM_SETUP=GEM_PATH=$(ROOT)/$(APP_GEM_HOME) GEM_HOME=$(ROOT)/$(APP_GEM_HOME) PATH=$(ROOT)/$(APP_GEM_HOME)/bin:$(PATH)
BUNDLE=$(ROOT)/$(APP_GEM_HOME)/bin/bundle
DEB_FILENAME=pkg/$(APP)_$(shell cd src && git describe --tags --abbrev=0)_amd64.deb
DEPENDS_FILE=$(ROOT)/$(SRC)/depends

# No idea why activate needs to be explicitly listed here.
all: dpkg_prepare changelog tag $(ROOT)/$(SRC_ROOT)/activate prepare deb


# This task provides a $(ROOT)/$(SRC) directory with the current tip, to
# enable building debug packages without tagging anything.
# To use: make clean && make debug_tag all
debug_tag:
	mkdir -p $(shell dirname $(ROOT)/$(SRC))
	# Get rid of any stale version we've got lying around
	rm -rf $(ROOT)/$(SRC)
	# Grab the code...
	git clone #{src_repo} $(ROOT)/$(SRC)
	# Uncommitted modifications...
	(cd #{src_repo} && git diff -U3) | patch -d $(ROOT)/$(SRC) -u -p1
	# Remove deleted files...
	# This uses a `while read` instead of an xargs because if there
	# aren't any deleted files, `xargs rm` breaks.
	(cd #{src_repo} && git status --short | grep '^D' | awk '{print $$2}' | (cd $(ROOT)/$(SRC) && while read deleted; do rm $deleted; done))
	# Add untracked and unignored files...
	(cd #{src_repo} && git status --short | grep '^\?\?' | awk '{print $$2}' | tar -cf - -T - | (cd $(ROOT)/$(SRC) && tar -xf -))
	# Pretend it's not a git clone
	rm -rf $(ROOT)/$(SRC)/.git

tag: $(ROOT)/$(SRC)

changelog: $(ROOT)/usr/share/doc/$(APP)/changelog

$(ROOT)/usr/share/doc/$(APP)/changelog:
	mkdir -p $(ROOT)/usr/share/doc/$(APP)
	(cd #{src_repo} && au-rebuild-changelog --app-name $(APP)) > $(ROOT)/usr/share/doc/$(APP)/changelog

dpkg_prepare: $(ROOT)/DEBIAN/control

$(ROOT)/DEBIAN/control: $(ROOT)/$(APP_GEM_HOME) $(DEPENDS_FILE)
	mkdir -p $(ROOT)/DEBIAN
	(test -f $(DEPENDS_FILE) && cat $(DEPENDS_FILE)) | \
		au-gem-home-deps -s $(ROOT)/$(APP_GEM_HOME) | \
		au-mk-control #{src_repo} $(APP) > $(ROOT)/DEBIAN/control

$(ROOT)/$(SRC): #{src_repo}/.git/logs/HEAD
	rm -rf $(ROOT)/$(SRC)
	au-checkout-latest-tag #{src_repo} $(ROOT)/$(SRC)

$(DEPENDS_FILE): $(ROOT)/$(SRC)

gems: $(ROOT)/$(APP_GEM_HOME)

prepare:
	if [ -e $(ROOT)/$(SRC)/Makefile ]; then (cd $(ROOT)/$(SRC) && $(GEM_SETUP) make release) fi

bundler: $(BUNDLE)

$(BUNDLE):
	# Bundler gives us no easy way to determine whether the app itself
	# depends on bundler, or would work without it.  Because of that we
	# *have* to include it in the app's $$GEM_HOME on the off-chance it's
	# needed.  This is bad and wrong.
	mkdir -p $(ROOT)/$(APP_GEM_HOME)
	/bin/bash -c '$(GEM_SETUP) gem install bundler --env-shebang --no-rdoc --no-ri --install-dir=$(ROOT)/$(APP_GEM_HOME)'

$(ROOT)/$(APP_GEM_HOME): $(ROOT)/$(SRC) bundler
	/bin/bash -c 'cd $(ROOT)/$(SRC) && $(GEM_SETUP) $(BUNDLE) install --without=test,development'
	rm -f $(ROOT)/$(BUNDLE_GEM_HOME)/cache/*
	rm -f $(ROOT)/$(APP_GEM_HOME)/cache/*

$(ROOT)/$(SRC_ROOT)/activate: $(ROOT)/$(SRC)
	au-mk-activate $(APP_GEM_HOME) > $@

activate: $(ROOT)/$(SRC_ROOT)

deb: $(DEB_FILENAME)
	
$(DEB_FILENAME):	$(ROOT)/DEBIAN/control
	mkdir -p $(shell dirname $(DEB_FILENAME))
	dpkg-deb --build build $(DEB_FILENAME)

clean:
	rm -rf $(ROOT) pkg

.PHONY: all debug_tag tag clean gems dpkg_prepare prepare
MAKEFILE
