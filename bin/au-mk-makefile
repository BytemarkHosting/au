#!/usr/bin/env ruby

app_name = ARGV.shift or fail "Need an app name!"
prefix = ARGV.shift.to_s.sub("^/",'')
prefix = "opt/apps" if prefix.empty?

puts <<-MAKEFILE
REPO=src
BUILD_ROOT:=$(PWD)/build

APP=#{ app_name }
APP_HOME=#{ prefix }/$(APP)
APP_SOURCE=$(APP_HOME)/source
APP_GEM_HOME=$(APP_HOME)/.gems
VERSION=$(shell cd $(REPO) && au-rebuild-changelog -n $(APP) -v)

BUNDLE_GEM_HOME=$(APP_HOME)/vendor/bundle
GEM_SETUP=GEM_PATH=$(BUILD_ROOT)/$(APP_GEM_HOME) GEM_HOME=$(BUILD_ROOT)/$(APP_GEM_HOME) PATH=$(BUILD_ROOT)/$(APP_GEM_HOME)/bin:$(PATH)
BUNDLE=$(BUILD_ROOT)/$(APP_GEM_HOME)/bin/bundle

DEB_FILENAME=pkg/$(APP)_$(VERSION)_amd64.deb
DEPENDS_FILE=$(BUILD_ROOT)/$(APP_SOURCE)/depends

all: control changelog source prepare deb

# This task provides a $(BUILD_ROOT)/$(APP_SOURCE) directory with the current tip, to
# enable building debug packages without tagging anything.
# To use: make clean && make debug_tag all
debug_source: clean source
	# Uncommitted modifications...
	(cd ${REPO} && git diff -U3) | patch -d $(BUILD_ROOT)/$(APP_SOURCE) -u -p1
	# Remove deleted files...
	# This uses a `while read` instead of an xargs because if there
	# aren't any deleted files, `xargs rm` breaks.
	(cd ${REPO} && git status --short | grep '^D' | awk '{print $$2}' | (cd $(BUILD_ROOT)/$(APP_SOURCE) && while read deleted; do rm $deleted; done))
	# Add untracked and unignored files...
	(cd ${REPO} && git status --short | grep '^??' | awk '{print $$2}' | tar -cf - -T - | (cd $(BUILD_ROOT)/$(APP_SOURCE) && tar -xf -))

source: $(BUILD_ROOT)/$(APP_SOURCE)

changelog: $(BUILD_ROOT)/usr/share/doc/$(APP)/changelog

$(BUILD_ROOT)/usr/share/doc/$(APP)/changelog:
	mkdir -p $(BUILD_ROOT)/usr/share/doc/$(APP)
	(cd ${REPO} && au-rebuild-changelog --app-name $(APP)) > $(BUILD_ROOT)/usr/share/doc/$(APP)/changelog

control: changelog $(BUILD_ROOT)/DEBIAN/control

$(BUILD_ROOT)/DEBIAN/control: $(BUILD_ROOT)/$(APP_GEM_HOME) $(DEPENDS_FILE)
	mkdir -p $(BUILD_ROOT)/DEBIAN
	(test -f $(DEPENDS_FILE) && cat $(DEPENDS_FILE)) |\
 		au-gem-home-deps -s $(BUILD_ROOT)/$(APP_GEM_HOME) |\
 		au-mk-control $(BUILD_ROOT)/usr/share/doc/$(APP)/changelog > $(BUILD_ROOT)/DEBIAN/control

$(BUILD_ROOT)/$(APP_SOURCE): ${REPO}/.git/logs/HEAD
	mkdir -p ${BUILD_ROOT}
	(cd "${REPO}"; 		git archive --format=tar --prefix="${APP_SOURCE}/" HEAD | 		tar -xf- -C "${BUILD_ROOT}")

$(DEPENDS_FILE): $(BUILD_ROOT)/$(APP_SOURCE)

gems: $(BUILD_ROOT)/$(APP_GEM_HOME)

prepare:
	if [ -e $(BUILD_ROOT)/$(APP_SOURCE)/Makefile ]; then (cd $(BUILD_ROOT)/$(APP_SOURCE) && $(GEM_SETUP) make release) fi

bundler: $(BUNDLE)

$(BUNDLE):
	# Bundler gives us no easy way to determine whether the app itself
	# depends on bundler, or would work without it.  Because of that we
	# *have* to include it in the app's $$GEM_HOME on the off-chance it's
	# needed.  This is bad and wrong.
	mkdir -p $(BUILD_ROOT)/$(APP_GEM_HOME)
	/bin/bash -c '$(GEM_SETUP) gem install bundler --env-shebang --no-rdoc --no-ri --install-dir=$(BUILD_ROOT)/$(APP_GEM_HOME)'

$(BUILD_ROOT)/$(APP_GEM_HOME): $(BUILD_ROOT)/$(APP_SOURCE) bundler
	/bin/bash -c 'cd $(BUILD_ROOT)/$(APP_SOURCE) && $(GEM_SETUP) $(BUNDLE) install --without=test,development'
	rm -f $(BUILD_ROOT)/$(BUNDLE_GEM_HOME)/cache/*
	rm -f $(BUILD_ROOT)/$(APP_GEM_HOME)/cache/*

$(BUILD_ROOT)/$(APP_HOME)/activate: $(BUILD_ROOT)/$(APP_SOURCE)
	echo export GEM_HOME=/${APP_GEM_HOME} > $@
	echo export GEM_PATH=/${APP_GEM_HOME}:\\`gem environment gempath\\` >> $@
	echo export PATH=/${APP_GEM_HOME}/bin:\\$$PATH >> $@

activate: $(BUILD_ROOT)/$(APP_HOME)/activate

deb: $(DEB_FILENAME)
	
$(DEB_FILENAME):	$(BUILD_ROOT)/DEBIAN/control activate
	mkdir -p $(shell dirname $(DEB_FILENAME))
	dpkg-deb --build build $(DEB_FILENAME)

clean:
	rm -rf build pkg

.PHONY: all debug_source source clean gems control prepare

MAKEFILE
